/*
 * Copyright (C) 2008-2012 Osaka University.
 * Copyright (C) 2008-2012 National Institute of Informatics in Japan.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.naregi.rns.client;

import java.util.Map;

import org.apache.axis.message.MessageElement;
import org.globus.axis.message.addressing.EndpointReferenceType;

/**
 * RNSClient object is generated by {@link RNSClientHome#getRNSClient()}.
 *
 * RNSClient implementation is {@link RNSClientImpl}.
 */
public interface RNSClient {

	/**
	 * Bulk request for Add operation.
	 *
	 * @param baseDir base directory
	 * @param handle prepared Add request
	 * @return array of RNSError
	 * @throws RNSError if an error occurs
	 */
	public RNSError[] addBulk(String baseDir, RNSAddHandle handle)
			throws RNSError;

	/**
	 * Bulk request for Remove operation.
	 *
	 * @param baseDir base directory
	 * @param names names of child entries
	 * @return array of RNSError
	 * @throws RNSError if an error occurs
	 */
	public RNSError[] removeBulk(String baseDir, String[] names)
			throws RNSError;

	/**
	 * Bulk request for Rename operation.
	 *
	 * @param baseDir base directory
	 * @param fromtoMap the key is from_name, the value is to_name
	 * @return array of RNSError
	 * @throws RNSError if an error occurs
	 */
	public RNSError[] renameBulk(String baseDir, Map<String, String> fromtoMap)
			throws RNSError;

	/**
	 * Bulk request for setMetadata operation.
	 *
	 * @param baseDir base directory
	 * @param entries the key is a name, the value is a array of Metadata
	 * @return array of RNSError
	 * @throws RNSError if an error occurs
	 */
	public RNSError[] setMetadataBulk(String baseDir,
			Map<String, MessageElement[]> entries) throws RNSError;

	/**
	 * Creates a directory.
	 *
	 * @param path a new pathname to be created
	 * @throws RNSError if an error occurs
	 */
	public void mkdir(String path) throws RNSError;

	/**
	 * Creates a directory with Metadata array.
	 *
	 * @param path a new pathname to be created
	 * @param xmls Metadata array
	 * @throws RNSError if an error occurs
	 */
	public void mkdir(String path, MessageElement[] xmls) throws RNSError;

	/**
	 * Remove a directory and Destroy a referenced resource of the directory.
	 *
	 * @param path a pathname to be removed
	 * @throws RNSError if an error occurs
	 */
	public void rmdir(String path) throws RNSError;

	/**
	 * Remove a junction.
	 *
	 * @param path a pathname to be removed
	 * @throws RNSError if an error occurs
	 */
	public void rmJunction(String path) throws RNSError;

	/**
	 * Remove a directory with destroying the referenced resource or Remove a
	 * junction.
	 *
	 * @param path a pathname to be removed
	 * @throws RNSError if an error occurs
	 */
	public void remove(String path) throws RNSError;

	/**
	 * The same behavior as remove(). If an error occurs in destroying the
	 * referenced resource, the error is ignored.
	 *
	 * @param path a pathname to be removed
	 * @throws RNSError if an error occurs
	 */
	public void removeForce(String path) throws RNSError;

	/**
	 * Remove the reference (EPR) only. (The referenced resource is not
	 * destroyed.)
	 *
	 * @param path a pathname to be removed
	 * @throws RNSError if an error occurs
	 */
	public void removeReference(String path) throws RNSError;

	/**
	 * Return the default maximum recursive depth.
	 *
	 * @return default maximum recursive depth
	 */
	public int getDefaultMaxRecursiveDepth();

	/**
	 * Set a default maximum recursive depth.
	 *
	 * @param depth default maximum recursive depth
	 */
	public void setDefaultMaxRecursiveDepth(int depth);

	/**
	 * Remove directories and their contents (junctions) recursively.
	 *
	 * @param path a pathname of directory to be removed recursively
	 * @throws RNSError if an error occurs
	 */
	public void removeRecursive(String path) throws RNSError;

	/**
	 * Remove directories and their contents (junctions) recursively.
	 *
	 * @param path a pathname of directory to be removed recursively
	 * @param depth number of maximum depth
	 * @throws RNSError if an error occurs
	 */
	public void removeRecursive(String path, int depth) throws RNSError;

	/**
	 * Remove directories and their contents (junctions) recursively.
	 * {@link RNSRecursiveListener#action(EndpointReferenceType, String, String)}
	 * is called at every entry.
	 *
	 * @param path a pathname of directory to be removed recursively
	 * @param depth number of maximum depth
	 * @param listener RNSRecursiveListener for callback
	 * @throws RNSError if an error occurs
	 */
	public void removeRecursive(String path, int depth,
			RNSRecursiveListener listener) throws RNSError;

	/**
	 * List directory entries.
	 *
	 * @param path a pathname to be listed
	 * @param withRNSStat with RNSStat information if this is true
	 * @return RNSDirHandle. (have no entry if this is null)
	 * @throws RNSError if an error occurs
	 */
	public RNSDirHandle list(String path, boolean withRNSStat) throws RNSError;

	/**
	 * List directory entries of specified names
	 *
	 * @param baseDir base directory
	 * @param names child names to be listed
	 * @param withRNSStat with stat() information if it is true
	 * @return RNSDirHandle. (have no entry if this is null)
	 * @throws RNSError if an error occurs
	 */
	public RNSDirHandle list(String baseDir, String[] names, boolean withRNSStat)
			throws RNSError;

	/**
	 * Check whether the entry is a directory.
	 *
	 * @param path a pathname to be checked
	 * @return true if the entry is a directory
	 * @throws RNSError if an error occurs
	 */
	public boolean isDirectory(String path) throws RNSError;

	/**
	 * Check whether the entry exists.
	 *
	 * @param path a pathname to be checked
	 * @return true if the entry exists
	 * @throws RNSError if an error occurs
	 */
	public boolean exists(String path) throws RNSError;

	/**
	 * Get a directory status. (Junctions do not have this status.)
	 *
	 * @param path a directory pathname to get the status
	 * @return RNSStat
	 * @throws RNSError if an error occurs
	 */
	public RNSStat stat(String path) throws RNSError;

	/**
	 * Copy an entry.
	 *
	 * @param from a pathname of source entry
	 * @param to a new pathname of target entry
	 * @throws RNSError if an error occurs
	 */
	public void copyEntry(String from, String to) throws RNSError;

	/**
	 * Rename an entry.
	 *
	 * @param from a old pathname of source entry
	 * @param to a new pathname of target entry
	 * @throws RNSError if an error occurs
	 */
	public void rename(String from, String to) throws RNSError;

	/**
	 * Add an EPR (refer to an existing RNS directory) as a local RNS directory.
	 *
	 * @param path a new pathname to be added
	 * @param epr other RNS EPR
	 * @throws RNSError if an error occurs
	 */
	public void addRNSEPR(String path, EndpointReferenceType epr)
			throws RNSError;

	/**
	 * Add an EPR (refer to an existing RNS directory) as a local RNS directory
	 * with Metadata array.
	 *
	 * @param path a new pathname to be added
	 * @param epr EPR of a RNS directory
	 * @param xmls Metadata array
	 * @throws RNSError if an error occurs
	 */
	public void addRNSEPR(String path, EndpointReferenceType epr,
			MessageElement[] xmls) throws RNSError;

	/**
	 * Add an EPR as a junction.
	 *
	 * @param path a new pathname to be added
	 * @param epr EPR
	 * @throws RNSError if an error occurs
	 */
	public void addJunction(String path, EndpointReferenceType epr)
			throws RNSError;

	/**
	 * Add an EPR as a junction with Metadata array.
	 *
	 * @param path a new pathname to be added
	 * @param epr EPR
	 * @throws RNSError if an error occurs
	 */
	public void addJunction(String path, EndpointReferenceType epr,
			MessageElement[] xmls) throws RNSError;

	/**
	 * Get an EPR.
	 *
	 * @param path a pathname
	 * @param dirOK throw {@link RNSError.Errno#EISDIR} if this is false and the
	 *            pathname is a directory
	 * @return EPR
	 * @throws RNSError if an error occurs
	 */
	public EndpointReferenceType getEPR(String path, boolean dirOK)
			throws RNSError;

	/**
	 * Get Metadata array.
	 *
	 * @param path a pathname
	 * @return Meatadata array
	 * @throws RNSError if an error occurs
	 */
	public MessageElement[] getMetadata(String path) throws RNSError;

	/**
	 * Set Metadata array
	 *
	 * @param path a pathname
	 * @param xmls Metadata array
	 * @throws RNSError if an error occurs
	 */
	public void setMetadata(String path, MessageElement[] xmls) throws RNSError;
}
