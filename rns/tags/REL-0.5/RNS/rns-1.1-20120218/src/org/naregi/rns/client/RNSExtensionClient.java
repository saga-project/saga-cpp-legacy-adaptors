/*
 * Copyright (C) 2008-2011 Osaka University.
 * Copyright (C) 2008-2011 National Institute of Informatics in Japan.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.naregi.rns.client;

import java.util.Map;

import org.naregi.rns.ACL;
import org.naregi.rns.CallerInfo;
import org.naregi.rns.stubs.ProfileType;

/**
 * RNSExtensionClient object is generated by
 * {@link RNSClientHome#getRNSExtensionClient()}.
 *
 * RNSExtensionClient implementation is {@link RNSExtensionClientImpl}.
 */
public interface RNSExtensionClient {

	/* miscellaneous operations */
	/**
	 * Call no operation of the Server. (null communication)
	 *
	 * @throws RNSError if an error occurs
	 */
	public void noop() throws RNSError;

	/**
	 * Get the version String of the RNS Server
	 *
	 * @return version String
	 * @throws RNSError if an error occurs
	 */
	public String getServerVersion() throws RNSError;

	/**
	 * Start benchmark profiler in the Server.
	 *
	 * @throws RNSError if an error occurs
	 */
	public void startProfile() throws RNSError;

	/**
	 * Stop benchmark profiler in the Server.
	 *
	 * @return ProfileType array
	 * @throws RNSError if an error occurs
	 */
	public ProfileType[] stopProfile() throws RNSError;

	/**
	 * Get the Server status.
	 *
	 * @return pairs of status (Map<status name, status value>)
	 * @throws RNSError if an error occurs
	 */
	public Map<String, String> getServerStatus() throws RNSError;

	/* ACL operations */
	/**
	 * Get an ACL of the entry.
	 *
	 * @param path a pathname
	 * @param useCache enable to cache ACLs if this is true
	 * @return ACL of the entry
	 * @throws RNSError if an error occurs
	 */
	public ACL getACL(String path, boolean useCache) throws RNSError;

	/**
	 * Set an ACL to the entry.
	 *
	 * This aclSpecs has Strings of the aclSpec format and commas as the
	 * separator.
	 *
	 * See {@link RNSExtensionClient#setACL(String, String[])}.
	 *
	 * @param path a pathname
	 * @param aclSpecs aclSpecs
	 * @throws RNSError if an error occurs
	 */
	public void setACL(String path, String aclSpecs) throws RNSError;

	/**
	 * Set an ACL to the entry.
	 *
	 * This aclSpecs is String array of the aclSpec format.
	 * The aclSpec format is described at {@link ACL#ACL(String[])}.
	 *
	 * @param path a pathname
	 * @param aclSpecs aclSpecs
	 * @throws RNSError if an error occurs
	 */
	public void setACL(String path, String[] aclSpecs) throws RNSError;

	/**
	 * Remove ACL entries. (Remove one type from ACL)
	 *
	 * <pre>
	 * --- names of ACL entry type ---
	 * owner (or ou)
	 * ownergroup (or og)
	 * user (or u) (need names)
	 * group (or g) (need names)
	 * mask (or m)
	 * other (or o)
	 * default:owner (or d:ou)
	 * default:ownergroup (or d:og)
	 * default:user (or d:u) (need names)
	 * default:group (or d:g) (need names)
	 * default:mask (or d:m)
	 * default:other (or d:o)
	 * </pre>
	 *
	 * @param path a pathname
	 * @param typeStr name of ACL entry type
	 * @param names remove names for user, group, default:user and default:group
	 * @throws RNSError if an error occurs
	 */
	public void removeACL(String path, String typeStr, String[] names)
			throws RNSError;

	/**
	 * Remove ACL entries. (Remove one type from ACL)
	 *
	 * See {@link RNSExtensionClient#removeACL(String, String, String[])}.
	 *
	 * @param path a pathname
	 * @param type TYPE_* of ACL (See {@link ACL})
	 * @param names remove names for user, group, default:user and default:group
	 * @throws RNSError if an error occurs
	 */
	public void removeACL(String path, short type, String[] names)
			throws RNSError;

	/**
	 * Get the caller(client user) information.
	 *
	 * @return Caller information (See {@link CallerInfo})
	 * @throws RNSError if an error occurs
	 */
	public CallerInfo getCallerInfo() throws RNSError;
}