/* besBESSOAPBindingProxy.cpp
   Generated by gSOAP 2.7.11 from ./wsdl/wsdl/basic-execution-service.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "besBESSOAPBindingProxy.h"

namespace bes {

BESSOAPBindingProxy::BESSOAPBindingProxy()
{	BESSOAPBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BESSOAPBindingProxy::BESSOAPBindingProxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	BESSOAPBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BESSOAPBindingProxy::BESSOAPBindingProxy(soap_mode iomode)
{	BESSOAPBindingProxy_init(iomode, iomode);
}

BESSOAPBindingProxy::BESSOAPBindingProxy(soap_mode imode, soap_mode omode)
{	BESSOAPBindingProxy_init(imode, omode);
}

void BESSOAPBindingProxy::BESSOAPBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"addressing", "http://www.w3.org/2005/03/addressing", NULL, NULL},
	{"jsdl", "http://schemas.ggf.org/jsdl/2005/11/jsdl", NULL, NULL},
	{"bes", "http://schemas.ggf.org/bes/2005/11/bes", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

BESSOAPBindingProxy::~BESSOAPBindingProxy()
{ }

void BESSOAPBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *BESSOAPBindingProxy::soap_fault()
{	return (const bes::SOAP_ENV__Fault*)this->fault;
}

const char *BESSOAPBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *BESSOAPBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int BESSOAPBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void BESSOAPBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void BESSOAPBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *BESSOAPBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int BESSOAPBindingProxy::CreateActivityFromJSDL(_bes__CreateActivityFromJSDL *bes__CreateActivityFromJSDL, _bes__CreateActivityFromJSDLResponse *bes__CreateActivityFromJSDLResponse)
{	struct soap *soap = this;
	struct __bes__CreateActivityFromJSDL soap_tmp___bes__CreateActivityFromJSDL;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__CreateActivityFromJSDL.bes__CreateActivityFromJSDL = bes__CreateActivityFromJSDL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__CreateActivityFromJSDL(soap, &soap_tmp___bes__CreateActivityFromJSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__CreateActivityFromJSDL(soap, &soap_tmp___bes__CreateActivityFromJSDL, "-bes:CreateActivityFromJSDL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__CreateActivityFromJSDL(soap, &soap_tmp___bes__CreateActivityFromJSDL, "-bes:CreateActivityFromJSDL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!bes__CreateActivityFromJSDLResponse)
		return soap_closesock(soap);
	bes__CreateActivityFromJSDLResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	bes__CreateActivityFromJSDLResponse->soap_get(soap, "bes:CreateActivityFromJSDLResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::GetActivityStatus(_bes__GetActivityStatus *bes__GetActivityStatus, _bes__GetActivityStatusResponse *bes__GetActivityStatusResponse)
{	struct soap *soap = this;
	struct __bes__GetActivityStatus soap_tmp___bes__GetActivityStatus;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__GetActivityStatus.bes__GetActivityStatus = bes__GetActivityStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__GetActivityStatus(soap, &soap_tmp___bes__GetActivityStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__GetActivityStatus(soap, &soap_tmp___bes__GetActivityStatus, "-bes:GetActivityStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__GetActivityStatus(soap, &soap_tmp___bes__GetActivityStatus, "-bes:GetActivityStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!bes__GetActivityStatusResponse)
		return soap_closesock(soap);
	bes__GetActivityStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	bes__GetActivityStatusResponse->soap_get(soap, "bes:GetActivityStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::RequestActivityStateChanges(_bes__RequestActivityStateChanges *bes__RequestActivityStateChanges, _bes__RequestActivityStateChangesResponse *bes__RequestActivityStateChangesResponse)
{	struct soap *soap = this;
	struct __bes__RequestActivityStateChanges soap_tmp___bes__RequestActivityStateChanges;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__RequestActivityStateChanges.bes__RequestActivityStateChanges = bes__RequestActivityStateChanges;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__RequestActivityStateChanges(soap, &soap_tmp___bes__RequestActivityStateChanges);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__RequestActivityStateChanges(soap, &soap_tmp___bes__RequestActivityStateChanges, "-bes:RequestActivityStateChanges", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__RequestActivityStateChanges(soap, &soap_tmp___bes__RequestActivityStateChanges, "-bes:RequestActivityStateChanges", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!bes__RequestActivityStateChangesResponse)
		return soap_closesock(soap);
	bes__RequestActivityStateChangesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	bes__RequestActivityStateChangesResponse->soap_get(soap, "bes:RequestActivityStateChangesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::StopAcceptingNewActivities(char *bes__StopAcceptingNewActivities, char *&bes__StopAcceptingNewActivitiesResponse)
{	struct soap *soap = this;
	struct __bes__StopAcceptingNewActivities soap_tmp___bes__StopAcceptingNewActivities;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__StopAcceptingNewActivities.bes__StopAcceptingNewActivities = bes__StopAcceptingNewActivities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__StopAcceptingNewActivities(soap, &soap_tmp___bes__StopAcceptingNewActivities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__StopAcceptingNewActivities(soap, &soap_tmp___bes__StopAcceptingNewActivities, "-bes:StopAcceptingNewActivities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__StopAcceptingNewActivities(soap, &soap_tmp___bes__StopAcceptingNewActivities, "-bes:StopAcceptingNewActivities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	bes__StopAcceptingNewActivitiesResponse = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_inliteral(soap, NULL, &bes__StopAcceptingNewActivitiesResponse);
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::StartAcceptingNewActivities(char *bes__StartAcceptingNewActivities, char *&bes__StartAcceptingNewActivitiesResponse)
{	struct soap *soap = this;
	struct __bes__StartAcceptingNewActivities soap_tmp___bes__StartAcceptingNewActivities;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__StartAcceptingNewActivities.bes__StartAcceptingNewActivities = bes__StartAcceptingNewActivities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__StartAcceptingNewActivities(soap, &soap_tmp___bes__StartAcceptingNewActivities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__StartAcceptingNewActivities(soap, &soap_tmp___bes__StartAcceptingNewActivities, "-bes:StartAcceptingNewActivities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__StartAcceptingNewActivities(soap, &soap_tmp___bes__StartAcceptingNewActivities, "-bes:StartAcceptingNewActivities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	bes__StartAcceptingNewActivitiesResponse = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_inliteral(soap, NULL, &bes__StartAcceptingNewActivitiesResponse);
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::IsAcceptingNewActivities(char *bes__IsAcceptingNewActivities, _bes__IsAcceptingNewActivitiesResponse *bes__IsAcceptingNewActivitiesResponse)
{	struct soap *soap = this;
	struct __bes__IsAcceptingNewActivities soap_tmp___bes__IsAcceptingNewActivities;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__IsAcceptingNewActivities.bes__IsAcceptingNewActivities = bes__IsAcceptingNewActivities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__IsAcceptingNewActivities(soap, &soap_tmp___bes__IsAcceptingNewActivities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__IsAcceptingNewActivities(soap, &soap_tmp___bes__IsAcceptingNewActivities, "-bes:IsAcceptingNewActivities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__IsAcceptingNewActivities(soap, &soap_tmp___bes__IsAcceptingNewActivities, "-bes:IsAcceptingNewActivities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!bes__IsAcceptingNewActivitiesResponse)
		return soap_closesock(soap);
	bes__IsAcceptingNewActivitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	bes__IsAcceptingNewActivitiesResponse->soap_get(soap, "bes:IsAcceptingNewActivitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BESSOAPBindingProxy::GetActivityJSDLDocuments(_bes__GetActivityJSDLDocuments *bes__GetActivityJSDLDocuments, _bes__GetActivityJSDLDocumentsResponse *bes__GetActivityJSDLDocumentsResponse)
{	struct soap *soap = this;
	struct __bes__GetActivityJSDLDocuments soap_tmp___bes__GetActivityJSDLDocuments;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___bes__GetActivityJSDLDocuments.bes__GetActivityJSDLDocuments = bes__GetActivityJSDLDocuments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___bes__GetActivityJSDLDocuments(soap, &soap_tmp___bes__GetActivityJSDLDocuments);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___bes__GetActivityJSDLDocuments(soap, &soap_tmp___bes__GetActivityJSDLDocuments, "-bes:GetActivityJSDLDocuments", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___bes__GetActivityJSDLDocuments(soap, &soap_tmp___bes__GetActivityJSDLDocuments, "-bes:GetActivityJSDLDocuments", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!bes__GetActivityJSDLDocumentsResponse)
		return soap_closesock(soap);
	bes__GetActivityJSDLDocumentsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	bes__GetActivityJSDLDocumentsResponse->soap_get(soap, "bes:GetActivityJSDLDocumentsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace bes

/* End of client proxy code */
